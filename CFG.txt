MAIN_STATE -> LOOP_STATEMENT | CONDITIONAL_STATEMENT | FUNCTION_STATEMENT | DECLARATION | FUNCTION_STATEMENT | TRY_STATEMENT
EXPRESSION -> NUMBER_TYPE | WORD | STRING | BOOLEAN | NULL | EXPRESSION COMPARISON EXPRESSION | EXPRESSION ARITHMATIC_OP EXPRESSION | EXPRESSION LOGICAL_OP EXPRESSION | EXPRESSION BITWISE_OP_OP EXPRESSION | EXPRESSION ASSIGN_OPS EXPRESSION
INSIDE_STATE -> CURLY_BARACKET_OPEN MAIN_STATE CURLY_BARACKET_CLOSE | CURLY_BARACKET_OPEN RETURN_STATE CURLY_BARACKET_CLOSE
RETURN_STATE -> MAIN_STATE RETURN
BREAK_STATE -> MAIN_STATE BREAK
CONTINUE_STATE -> MAIN_STATE CONTINUE

/* declaration */
DECLARATION -> VARIABLE_DECLARATOR WORD EQUAL EXPRESSION | VARIABLE_DECLARATOR WORD EQUAL NUMBER_TYPE | VARIABLE_DECLARATOR WORD EQUAL STRING | VARIABLE_DECLARATOR WORD EQUAL LIST
VARIABLE_DECLARATOR -> LET | VAR | CONST

/* data type */
DATA_TYPE -> NUMBER_TYPE | STRING
STRING -> DOUBLE_QUOTE DOUBLE_QUOTE | DOUBLE_QUOTE WORD DOUBLE_QUOTE
LIST -> SQUARE_BRACKET_OPEN INSIDE_LIST SQUARE_BRACKET_CLOSE
INSIDE_LIST -> LIST_ELEMENT_ACCESS | INSIDE_LIST_DECLARATION
INSIDE_LIST_DECLARATION -> DATA_TYPE COMMA INSIDE_LIST
LIST_ELEMENT_ACCESS -> INTEGER
ACCESS_LIST -> WORD LIST

/* number type */
FLOAT -> NUMBER PERIOD NUMBER | MINUS NUMBER PERIOD NUMBER
INTEGER -> NUMBER | MINUS NUMBER
NUMBER_TYPE -> INTEGER | FLOAT

/* conditional */
CONDITIONAL_STATEMENT -> IF_CONDITION | SWITCH_CONDITION
CONDITION -> ROUND_BRACKET_OPEN EXPRESSION ROUND_BRACKET_CLOSE
CASE_CONDITION -> CASE COLON MAIN_STATE CASE_CONDITION | DEFAULT COLON MAIN_STATE
IF_CONDITION -> IF CONDITION INSIDE_STATE | IF_CONDITION ELIF_CONDITION
ELIF_CONDITION -> ELSE IF CONDITION INSIDE_STATE | ELIF_CONDITION ELSE_CONDITION
ELSE_CONDITION -> ELSE INSIDE_STATE
SWITCH_CONDITION -> SWITCH ROUND_BRACKET_OPEN EXPRESSION ROUND_BRACKET_CLOSE CURLY_BARACKET_OPEN CASE_CONDITION CURLY_BARACKET_CLOSE

/* try catch */
TRY_STATEMENT -> TRY INSIDE_STATE CATCH_STATE | TRY TRY_INSIDE CATCH_STATE
TRY_INSIDE -> IF CONDITION THROW WORD
CATCH_STATE -> CATCH ROUND_BRACKET_OPEN ERROR ROUND_BRACKET_CLOSE INSIDE_STATE | CATCH_STATE FINALLY_STATE
ERROR -> EVAL_ERROR | RANGE_ERROR | REFERENCE_ERROR | SYNTAX_ERROR | TYPE_ERROR | URI_ERROR
FINALLY_STATE -> FINALLY INSIDE_STATE

/* loop */
LOOP_STATEMENT -> FOR_LOOP | WHILE_LOOP
FOR_LOOP -> FOR ROUND_BRACKET_OPEN LET WORD EQUAL NUMBER SEMI_COLON EXPRESSION SEMI_COLON WORD INCREMENT ROUND_BRACKET_CLOSE INSIDE_STATE | FOR ROUND_BRACKET_OPEN LET WORD EQUAL NUMBER SEMI_COLON EXPRESSION SEMI_COLON WORD DECREMENT ROUND_BRACKET_CLOSE INSIDE_STATE
WHILE_LOOP -> WHILE CONDITION INSIDE_STATE

/* function */
PARAMETER -> WORD | WORD COMMA PARAMETER
PARAMETER_CONDITION -> ROUND_BRACKET_OPEN PARAMETER ROUND_BRACKET_CLOSE | ROUND_BRACKET_OPEN ROUND_BRACKET_CLOSE
FUNCTION_STATEMENT -> FUNCTION WORD PARAMETER_CONDITION INSIDE_STATE

/* return */
RETURN_STATEMENT -> RETURN_PARAM | RETURN
RETURN_PARAM -> RETURN EXPRESSION | RETURN CONDITION

/* operator */
ARITHMATIC_OP -> PLUS | MINUS | MULTIPLY | DIVIDE | MODULO | POWER
LOGICAL_OP -> LOGICAL_AND | LOGICAL_OR
BITWISE_OP -> BITWISE_AND | BITWISE_NOT | BITWISE_OR | BITWISE_XOR | BITWISE_RIGHT | BITWISE_LEFT | BITWISE_UNSIGNED_RIGHT
COMPARISON -> EQUAL EQUAL | EQUAL EQUAL EQUAL | EXCLAMATION EQUAL | GREATER_THAN | GREATER_THAN EQUAL | LOWER_THAN | LOWER_THAN EQUAL
ASSIGN_OPERATOR -> PLUS EQUAL | MINUS EQUAL | MULTIPLY EQUAL | DIVIDE EQUAL | MODULO EQUAL | POWER EQUAL
ASSIGN_OPERATOR_BITWISE -> BITWISE_AND EQUAL | BITWISE_OR EQUAL | BITWISE_XOR EQUAL
ASSIGN_OPERATOR_LOGICAL -> LOGICAL_AND EQUAL | LOGICAL_OR EQUAL | QUESTION QUESTION EQUAL
ASSIGN_OPERATOR_SHIFT -> BITWISE_LEFT EQUAL | BITWISE_RIGHT EQUAL | BITWISE_UNSIGNED_RIGHT EQUAL
ASSIGN_OPS -> ASSIGN_OPERATOR | ASSIGN_OPERATOR_BITWISE | ASSIGN_OPERATOR_LOGICAL | ASSIGN_OPERATOR_SHIFT
INCREMENT -> PLUS PLUS
DECREMENT -> MINUS MINUS

/*terminal*/
PLUS -> +
MINUS -> -
MULTIPLY -> *
DIVIDE -> /
MODULO -> %
POWER -> **
NUMBER -> num
IF -> if
ELSE -> else
BREAK -> break
WHILE -> while
FOR -> for
CONST -> const
NULL -> null
COLON -> :
SEMI_COLON -> ;
COMMA -> ,
PERIOD -> .
SQUARE_BRACKET_OPEN -> [
SQUARE_BRACKET_CLOSE -> ]
ROUND_BRACKET_OPEN -> (
ROUND_BRACKET_CLOSE -> )
CURLY_BARACKET_OPEN -> {
CURLY_BARACKET_CLOSE -> }
EQUAL -> =
EXCLAMATION -> !
QUESTION -> ?
GREATER_THAN -> >
LOWER_THAN -> <
BOOLEAN -> true | false
LET -> let
VAR -> var
CONST -> const
CHAR -> char
LOGICAL_AND -> &&
LOGICAL_OR -> ||
BITWISE_AND -> &
BITWISE_OR -> |
BITWISE_NOT -> ~
BITWISE_XOR -> ^
BITWISE_RIGHT -> >>
BITWISE_LEFT -> <<
BITWISE_UNSIGNED_RIGHT -> >>>
RETURN -> return
FUNCTION -> function
NEW -> new
CONTINUE -> continue
TRY -> try
CATCH -> catch
FINALLY -> finally
SWITCH -> switch
CASE -> case
DEFAULT -> default
THROW -> throw
DELETE -> delete
SINGLE_QUOTE -> '
DOUBLE_QUOTE -> "
WORD -> word
EVAL_ERROR -> EvalError
RANGE_ERROR -> RangeError
REFERENCE_ERROR -> RefferenceError
SYNTAX_ERROR -> SyntaxError
TYPE_ERROR -> TypeError
URI_ERROR -> URIError
MAIN_STATE -> MAIN_STATE MAIN_STATE | IF_STATE | LOOP_STATE | FUNCTION_STATE | TRY_STATE | DECLARATION | COMMENT | OPS_TYPE | ASSIGNMENT_STATE | RETURN_STATEMENT | FUNCTION_ACCESS
R_BRACKET -> ROUND_BRACKET_OPEN R_BRACKET ROUND_BRACKET_CLOSE | ROUND_BRACKET_OPEN R_BRACKET OPS_TYPE ROUND_BRACKET_CLOSE | OPS_TYPE

/* ASSIGNMENT */
ASSIGNMENT_STATE -> VAR_NAME EQUAL OPS_TYPE

/* CONDITIONAL */
IF_STATE -> IF ROUND_BRACKET_OPEN OPS_TYPE ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN MAIN_STATE CURLY_BRACKET_CLOSE | IF ROUND_BRACKET_OPEN OPS_TYPE ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN MAIN_STATE CURLY_BRACKET_CLOSE ELSE_STATE
ELSE_STATE -> ELSE IF_STATE | ELSE CURLY_BRACKET_OPEN MAIN_STATE OPS_TYPE CURLY_BRACKET_CLOSE
SWITCH_STATE -> SWITCH ROUND_BRACKET_OPEN VAR_NAME CURLY_BRACKET_CLOSE CURLY_BRACKET_OPEN SWITCH_BODY CURLY_BRACKET_CLOSE
SWITCH_BODY -> CASE OPERATION COLON MAIN_STATE | CASE OPERATION COLON MAIN_STATE BREAK | SWITCH_BODY SWITCH_BODY | DEFAULT COLON MAIN_STATE
CONDITION -> OPS_TYPE COMPARATOR OPS_TYPE

/* LOOP */
LOOP_STATE -> FOR_STATE | WHILE_STATE
FOR_STATE -> FOR ROUND_BRACKET_OPEN FOR_INSIDE ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN MAIN_STATE CURLY_BRACKET_CLOSE
FOR_INSIDE -> FOR_INITIAL SEMI_COLON FOR_CONDITION SEMI_COLON FOR_OPERATION | SEMI_COLON SEMI_COLON
FOR_INITIAL -> LET_DECLARATION | VAR_DECLARATION | ASSIGNMENT_STATE
FOR_CONDITION -> CONDITION
FOR_OPERATION -> OPERATION
WHILE_STATE -> WHILE ROUND_BRACKET_OPEN OPS_TYPE 

/* FUNCTION */
FUNCTION_STATE -> FUNCTION FUNCTION_HEAD CURLY_BRACKET_OPEN MAIN_STATE CURLY_BRACKET_CLOSE | FUNCTION FUNCTION_HEAD CURLY_BRACKET_OPEN CURLY_BRACKET_CLOSE
FUNCTION_HEAD -> VAR_NAME ROUND_BRACKET_OPEN PARAMETER ROUND_BRACKET_CLOSE | VAR_NAME ROUND_BRACKET_OPEN ROUND_BRACKET_CLOSE
PARAMETER -> OPS_TYPE | OPS_TYPE COMMA | VAR_NAME EQUAL OPERATION | VAR_NAME EQUAL OPERATION COMMA PARAMETER
FUNCTION_ACCESS -> FUNCTION_HEAD | VAR_NAME DOT FUNCTION_ACCESS
RETURN_STATEMENT -> RETURN | RETURN OPS_TYPE
DELETE_STATEMENT -> DELETE VAR_NAME DOT VAR_NAME

/* TRY/CATCH */
TRY_STATE -> TRY_BODY CATCH_BODY | TRY_BODY CATCH_BODY FINALLY_BODY | TRY_BODY FINALLY_BODY
TRY_BODY -> TRY CURLY_BRACKET_OPEN MAIN_STATE CURLY_BRACKET_CLOSE
CATCH_BODY -> CATCH ROUND_BRACKET_OPEN VAR_NAME ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN MAIN_STATE CURLY_BRACKET_CLOSE | CATCH ROUND_BRACKET_OPEN VAR_NAME ROUND_BRACKET_CLOSE ROUND_BRACKET_OPEN VAR ROUND_BRACKET_CLOSE CURLY_BRACKET_OPEN MAIN_STATE CURLY_BRACKET_CLOSE CATCH_BODY
FINALLY_BODY -> FINALLY CURLY_BRACKET_OPEN MAIN_STATE CURLY_BRACKET_CLOSE
THROW_STATEMENT -> THROW OPERATION

/* DECLARATION */
DECLARATION -> CONST_DECLARATION | LET_DECLARATION | VAR_DECLARATION
CONST_DECLARATION -> CONST VAR_NAME EQUAL OPERATION | CONST VAR_NAME EQUAL NEW FUNCTION_HEAD
LET_DECLARATION -> LET VAR_NAME | LET VAR_NAME EQUAL OPERATION | LET VAR_NAME EQUAL NEW FUNCTION_ACCESS
VAR_DECLARATION -> VAR VAR_NAME | VAR VAR_NAME EQUAL OPERATION | VAR VAR_NAME EQUAL NEW FUNCTION_ACCESS

/* LIST */
LIST_ACCESS -> VAR_NAME SQUARE_BRACKET_OPEN OPERATION SQUARE_BRACKET_CLOSE
LIST_DECLARATION -> SQUARE_BRACKET_OPEN PARAMETER SQUARE_BRACKET_CLOSE

OPS_TYPE -> VAR_NAME | LIST_DECLARATION | NAN | NULL | TRUE | FALSE | OPERATION | STRING
STRING -> DOUBLE_QUOTE OPS_TYPE DOUBLE_QUOTE

/* TERMINAL ACCESS */
IF -> if
ELSE -> else
SWITCH -> switch
CASE -> case
DEFAULT -> default
FOR -> for
WHILE -> while
BREAK -> break
CONTINUE -> continue
FUNCTION -> function
RETURN -> return
TRY -> try
CATCH -> catch
FINALLY -> finally
THROW -> throw
VAR -> var
LET -> let
CONST -> const
TRUE -> true
FALSE -> false
NULL -> null
DELETE -> delete
NEW -> new
ROUND_BRACKET_OPEN -> [
ROUND_BRACKET_CLOSE -> ]
CURLY_BRACKET_OPEN -> {
CURLY_BRACKET_CLOSE -> }
ROUND_BRACKET_OPEN -> (
ROUND_BRACKET_CLOSE -> )
LOWER_THAN -> <
GREATER_THAN -> >
COMMA -> ,
DOT -> .
COMMENT_TAG -> //
COMMENT_START -> /*
COMMENT_END -> */
COLON -> :
SEMI_COLON -> ;
SINGLE_QUOTE -> '
DOUBLE_QUOTE -> "
EQUAL -> =
NUMBER -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
EXCLAMATION -> !
COMPARATOR -> EQUAL EQUAL | EQUAL EQUAL EQUAL | EXCLAMATION EQUAL | EXCLAMATION EQUAL EQUAL | GREATER_THAN | GREATER_THAN EQUAL | LOWER_THAN | LOWER_THAN EQUAL
OPERATION -> operation
TRUE -> true
FALSE -> false
NAN -> NaN
NULL -> null
VAR_NAME -> var_name